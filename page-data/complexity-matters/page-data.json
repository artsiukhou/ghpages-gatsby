{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/complexity-matters/","result":{"data":{"site":{"siteMetadata":{"title":"Be Best Dev","social":[{"name":"github","url":"https://github.com/artsiukhou"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"829f6294-9932-585c-be65-99b574303910","excerpt":"Today I want to share some quite random thoughts about  complexity  and why it matters (or not?) with a real-life example I've faced at oneâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Complexity Matters?\",\n  \"date\": \"2021-05-06T00:00:00.000Z\",\n  \"tags\": [\"programming\", \"thoughts\", \"complexity\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today I want to share some quite random thoughts about \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"complexity\"), \" and why it matters (or not?) with a real-life example I\\u2019ve faced at one of my jobs.\"), mdx(\"p\", null, \"But first, let\\u2019s think about what is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"complexity\"), \"? To put it simply, let\\u2019s say it\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"how many operations an algorithm would perform in the worst-case scenario\\\"\"), \".\\nOf course, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"complexity\"), \" topic could be quite\\u2026 eh, complex (lol). Sometimes it\\u2019s very difficult to calculate a good estimation of complexity. It also has\\nvarious dimensions, it could be anything an algorithm can be limited by: IO (disk, network), memory, CPU etc. But typically an average\\nsoftware developer just needs to know (and care about) things like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hash_map has constant (on average) complexity on its operations\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"for-loop is linear\"), \", right?\"), mdx(\"p\", null, \"Nowadays, with modern and very powerful computers people are thinking less and less about the complexity of an algorithm, and sometimes they are right:\\nfor a simple website, it doesn\\u2019t matter what algorithm is used to sort all hundred and seven users by name or filter out all objects marked as \\u201Cdeleted\\u201D.\\nOr on UI you can simply call a server with a request \\u201Cgive me all the items of a user\\u201D and not think about chunking, pagination and whatnot. Modern browsers\\ncan handle even gigabytes of data!\"), mdx(\"p\", null, \"But whatever, I would be really surprised if someone will write their own \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sort\"), \" when there are multiple \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fast\"), \" options available in the standard library\\nof almost any programming language. Often people are using data structures and algorithms without even thinking about complexity, they just trying to solve their problems\\nwith some default blocks they have handy. That\\u2019s not bad at all, we all know this quote about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://softwareengineering.stackexchange.com/questions/80084/is-premature-optimization-really-the-root-of-all-evil\"\n  }), \"premature optimisation\"), \".\\nBut it\\u2019s still important to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"remember\"), \" about complexity. When you think about complexity it\\u2019s not \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201Cyeah whatever let\\u2019s just call string.replace()\\u201D\"), \" anymore.\\nIt becomes \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201CI\\u2019ll call string.replace(), but each invocation will lead to reallocations. So it will work for now, but with x10 amount of strings, I\\u2019ll need to reconsider the algorithm\\u201D\"), \".\"), mdx(\"p\", null, \"Ok, now it\\u2019s time for a small exercise.\"), mdx(\"p\", null, \"It\\u2019s the year 2015. Space X just launched and landed their rocket for the first time, and you just finished watching the stream. A product owner comes\\nto your desk and asks you to add a simple feature to the service you\\u2019re working on: implement a request which takes a list of users, and returns all the\\nrecent posts for each of the users. Quicker, quicker, this feature is expected to be in production \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"yesterday\"), \"! No time to think, and you already have two functions\\nin your codebase which are fetching similar data, you can combine them easily, so in 10 minutes you\\u2019re pushing to master something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# you had this function somewhere\\ndef fetch_post_data(post_id):\\n    query = \\\"\\\"\\\"\\n    SELECT post_data FROM posts\\n    WHERE post_id=%(post_id)s\\n    LIMIT 1\\n    \\\"\\\"\\\"\\n    return db.exec(query, {\\\"post_id\\\": post_id})\\n\\n# this one is old as well\\ndef fetch_post_ids(uuid):\\n    query = \\\"\\\"\\\"\\n    SELECT post_id FROM user_post\\n    WHERE uuid=%(uuid)s\\n    ORDER BY post_id DESC\\n    LIMIT 100\\n    \\\"\\\"\\\"\\n    return db.exec(query, {\\\"uuid\\\": uuid})\\n\\n# so you came up with something like this\\ndef fetch_posts(uuid):\\n    post_ids = fetch_post_ids(uuid)\\n    return [\\n        fetch_post_data(post_id)\\n        for post_id in post_ids\\n    ]\\n\\n\\ndef process_get_posts(request):\\n    response = {}\\n    for uuid in request.uuids:\\n        response[uuid] = fetch_posts(uuid)\\n    return response\\n\")), mdx(\"p\", null, \"All good, release is a great success, the product owner is happy, you got a promotion (ha-ha).\"), mdx(\"p\", null, \"The year 2021. The service is still up and running, it\\u2019s still growing, it has changed few different owners, now it\\u2019s the 5th team maintaining it.\\nNo one from the original authors is working in the company, no one in the new team knows all the corners of the service.\"), mdx(\"p\", null, \"But what they do know is that periodically at 4 am alerts are waking them up because of the amount of 500 errors returned by the service.\\nThey have dashboards and see some spikes in requests to the service, ending up in some enormous 400,000 queries-per-second numbers on the database size.\\nSome days number is a bit lower (350,000-370,000) and there are no alerts, but roughly once per month, someone faces this issue.\\nOk, they even know the reason for that \\u2014 4 am is a very good time to kick off some background processes as there is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"almost\"), \" no user load.\\nSo other services and scripts are fetching some data for their needs.\"), mdx(\"p\", null, \"They\\u2019ve checked the most popular request at 4 am (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"~1 million\"), \" hits per minute) \\u2014 no red flags. 2nd popular \\u2014 the same. 3rd \\u2014 nothing\\u2026\\nThey are starting to think that maybe the database is needed to be sharded. A cache is already here and it\\u2019s quite big.\"), mdx(\"p\", null, \"One day someone almost randomly looks at \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"the 9th popular\"), \" request (with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"just 40,000\"), \" hits per minute)\\u2026 and finds out our good old \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"process_get_posts\"), \" function\\u2026\\nWHAT?! Ok, let\\u2019s calculate: the background script (quite old as well, no one looked at it either) is doing some chunking when calling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"get_posts\"), \".\\nSo no more than 1,000 UUIDs per request. But then each UUID can have 100 posts. So we generate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1,000 * (1 + 100)\"), \" queries to the database for a single request to the service!\\nYes, queries are not parallel, but each of them is processed within 2 milliseconds, so it\\u2019s easily hundreds of queries-per-second. And having 40k of them\\u2026\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"40,000 RPS / 60s * (1s / 2ms) = 333,333 QPS\"), \". Wow. They spend some more time on the code, modified it to fetch everything in a single query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"def fetch_posts(uuids):\\n    query = \\\"\\\"\\\"\\n    SELECT up.uuid, p.post_data FROM user_post up\\n    JOIN posts p ON p.post_id=up.post_id\\n    WHERE up.uuid IN %(uuids)s\\n    ORDER BY p.post_id DESC\\n    LIMIT 100\\n    \\\"\\\"\\\"\\n    return db.exec(query, {\\\"uuids\\\": uuids})\\n\\ndef process_get_posts(request):\\n    response = fetch_posts(uuid)\\n    return response\\n\")), mdx(\"p\", null, \"Is it better? It is worse? Well, it\\u2019s a tricky question as the query itself is more massive and complex now, some analysis of the query plan\\nis always a good thing to do. In our case, it was better because it resolved a long-running issue, which was triggered because of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"amount\"), \"\\nof queries as they exhausted the database\\u2019s worker-thread-pool. After the fix, the largest spike during the day became 15,000 QPS.\"), mdx(\"p\", null, \"What can I say? Know your codebase. Invest into the tooling to observe your system: have better metrics and logs, dashboards and alerts.\\nKnow your bottlenecks. Remember about complexity. And periodically revisit the system you have: sometimes you will cut some corners,\\nbut you will most likely need to address these issues in a long run. I\\u2019m pretty sure that the original authors of this code know everything I\\u2019ve mentioned here,\\nbut as it was not an issue from the beginning this code was alive for quite a decent amount of time.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/complexity-matters/","title":"Complexity Matters?","tags":["programming","thoughts","complexity"],"keywords":[],"date":"May 06, 2021","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"eb6cadee-c4d5-5cb2-8da6-ae070d494c01","excerpt":"You know that feeling when you've just read about some feature or tool and then you're looking for a chance to use it?\nI always wanted toâ€¦","slug":"/cpp17-method-detection/","title":"Refactoring with Modern(-ish) C++: Method Detection","date":"April 10, 2021"},"next":{"__typename":"MdxBlogPost","id":"bfc4e3ab-a9f1-52e5-86de-a535f72053d8","excerpt":"Let's write a function that helps us to print debug our code. The function takes another function and its set of parameters as argumentsâ€¦","slug":"/cpp-fold-expressions/","title":"Modern C++: Variadic Templates and Fold Expressions","date":"May 12, 2021"}},"pageContext":{"id":"829f6294-9932-585c-be65-99b574303910","previousId":"eb6cadee-c4d5-5cb2-8da6-ae070d494c01","nextId":"bfc4e3ab-a9f1-52e5-86de-a535f72053d8"}},"staticQueryHashes":["416447326","4198970465","764694655"]}